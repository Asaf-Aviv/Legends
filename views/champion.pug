include partials/head
body(style=`background-image: url(/assets/league/img/bgs/${champ.name.replace(' ', '').replace("'", '')}.jpg);`)
    include partials/nav
    include partials/sidenav
    .container(style="background-color: rgba(0, 0, 0, 0.75)")
        h1.champion-name.text-center.pt-3.mb-2= champ.name
        .champion-title.text-center.mb-2: q= champ.title
        .champion-role.text-center.mb-2: span= champ.tags.join(', ')
        hr
        .row
            .col-md-2.pl-3.text-center.pt-4
                a(href="/champions/" + champ.name.replace('_','').replace(' ', '').replace("'", '').replace('.', ''))
                    img(src=`/assets/league/img/champion-base-tile/${champ.name.replace("'", "").replace(' ', '').replace('.', '')}.png`)
            .col-md-5.col-sm-12
                table.table
                    tr
                        td.colorFF0000 Health
                        td.font-weight-bold= `${champ.stats.hp}(+${champ.stats.hpperlevel})`
                    tr
                        td.colorFF0000 Health Regen
                        td.font-weight-bold= `${champ.stats.hpregen}(+${champ.stats.hpregenperlevel})`
                    tr    
                        td.colorFF8C00 Attack Damage
                        td.font-weight-bold= `${champ.stats.attackdamage}(+${champ.stats.attackdamageperlevel})`
                    tr
                        td.colorFFFF00 Armor
                        td.font-weight-bold= `${champ.stats.armor}(+${champ.stats.armorperlevel})`
                    tr
                        td.colorFF00FF Magic Resist
                        td.font-weight-bold= Math.trunc(champ.stats.spellblock) + `(+${champ.stats.spellblockperlevel})`
            .col-md-5.col-sm-12
                table.table.general-color
                    tr
                        td Attack Speed
                        td.font-weight-bold= `${(champ.stats.attackspeedoffset * 10).toFixed(3)}(+${champ.stats.attackspeedperlevel})`
                    tr
                        td Range
                        td.font-weight-bold= champ.stats.attackrange
                    tr
                        td Movement Speed
                        td.font-weight-bold= champ.stats.movespeed
                    tr
                        td= champ.partype !== 'None' ? champ.partype : ''
                        td.font-weight-bold= champ.stats.mp ? Math.trunc(champ.stats.mp) : '', champ.stats.mpperlevel ? `(+${champ.stats.mpperlevel})` : ''
                    tr
                        td= champ.stats.mpregen ? `${champ.partype} Regen`: ''
                        td.font-weight-bold= champ.stats.mpregen || '', champ.stats.mpregenperlevel ? `(+${champ.stats.mpregenperlevel})` : ''
                    
    blockquote.blockquote.text-center.mb-0= champ.blurb
        = champ.blurb
    </blockquote>
        section.champion-abilities
            .container(style="background-color: rgba(0, 0, 0, 0.75)")
                h3.text-center.mb-4 Champion Abilities
                .ability-wrapper.row.col-10.offset-1
                    .passive-name.col-12.text-center.mb-1: h5.bold.general-color.pt-4= champ.passive.name
                    .ability-tile.col-lg-1.col-md-2.d-flex.justify-content-center.align-items-center.mb-4: img(src=`/assets/league/img/passive/${champ.passive.image.full}`)
                    -
                        let passiveDesc = champ.passive.description
                            passiveDesc = passiveDesc.replace(/bonus/g, 'Bonus ').replace(/spelldamage/g, 'AP').replace(/attackdamage/g, 'AD').replace(/armor/g, 'Armor')
                            passiveDesc = passiveDesc.replace(/magic damage/gi, '<span class="color99FF99">Magic Damage</span>')
                            passiveDesc = passiveDesc.replace(/physical damage/gi, '<span class="colorFF8C00">Physical Damage</span>')
                            passiveDesc = passiveDesc.replace(/maximum health/gi, '<span class="colorFF0000">Maximum Health</span>')
                            passiveDesc = passiveDesc.replace(/health/gi, '<span class="colorFF0000">Health</span>')
                            passiveDesc = passiveDesc.replace(/energy/gi, '<span class="colorFFFF00">Energy</span>')
                            passiveDesc = passiveDesc.replace(/magic/gi, '<span class="color99FF99">Magic</span>')
                            passiveDesc = passiveDesc.replace(/armor/gi, '<span class="colorFFFF00">Armor</span>')
                            passiveDesc = passiveDesc.replace(/physical/gi, '<span class="colorFF8C00">Physical</span>')
                    .ability-desc.col-lg-11.col-md-10.px-4.mb-4: span!= passiveDesc
                br
                - for (let i = 0; i < 4; i++)
                    .ability-wrapper.row.col-10.offset-1
                        .ability-name.col-12.text-center.mb-1: h5.bold.general-color.pt-4= champ.spells[i].name
                        .row.col-12.mb-4.px-4.text-center.bold.general-color
                            .cooldown.col-lg-4.col-sm-4.text-xs-center: span= 'Cooldown ' + champ.spells[i].cooldownBurn
                    
                            if champ.spells[i].resource
                                -let res = champ.spells[i].resource.replace('{{ cost }}', champ.spells[i].costBurn) || 'No Cost'
                                -let resEffect = res.match(/{{ ..+? }}/g)
                                if resEffect
                                    -res = res.replace(resEffect[0], champ.spells[i].effectBurn[resEffect[0].slice(4, resEffect[0].lastIndexOf(' '))])
                                .cost-type.col-lg-4.col-sm-4.text-xs-center: span= res
                            else 
                                .cost-type.col-lg-4.col-sm-4.text-xs-center: span No Cost
                                
                            .range.col-lg-4.col-sm-4.text-xs-center: span= 'Range ' + champ.spells[i].rangeBurn
                        .ability-tile.col-lg-1.d-flex.justify-content-center.align-items-center.mb-4: img(src=`/assets/league/img/spell/${champ.spells[i].image.full}`)
                        .ability-desc.col-lg-11.px-4.mb-4: span!= champ.spells[i].description
                        -
                            let tooltip = champ.spells[i].tooltip
                            let damageAmp

                            if (tooltip) {
                                let champEffects = tooltip.match(/{{ ..+? }}/g)
                                
                                if(champEffects) {
                                    champEffects.map(effect => {
                                    
                                    if (effect.includes('e')) {
                                        tooltip = tooltip.replace(effect, champ.spells[i].effectBurn[effect.slice(4, effect.lastIndexOf(' '))])
                                    }

                                    if (effect.includes('a')) {
                                        spellObj = champ.spells[i].vars ? champ.spells[i].vars.filter(obj => obj.key === effect.slice(3, 5))[0] : ''
                                        damageAmp = spellObj ? `(+${spellObj.coeff * 100}% ${spellObj.link})` : ''
                                        tooltip = tooltip.includes(`(+${effect})`) ? tooltip.replace(`(+${effect})`, damageAmp) : tooltip.replace(`(+${effect}%)`, damageAmp)

                                        if (tooltip.includes(`(+${effect})`)) tooltip = tooltip.replace(`(+${effect})`, damageAmp)
                                        if (tooltip.includes(`(+${effect}%)`)) tooltip = tooltip.replace(`(+${effect}%)`, damageAmp)
                                        if (tooltip.includes(effect)) tooltip = tooltip.replace(effect, damageAmp)
                                    }

                                    if (effect.includes('f')) {
                                        spellObj = champ.spells[i].vars ? champ.spells[i].vars.filter(obj => obj.key === effect.slice(3, 5))[0] : ''
                                        damageAmp = spellObj ? `(+${spellObj.coeff * 100}% ${spellObj.link})` : ''

                                        if (tooltip.includes(`(+${effect})`)) tooltip = tooltip.replace(`(+${effect})`, damageAmp)
                                        if (tooltip.includes(`(+${effect}%)`)) tooltip = tooltip.replace(`(+${effect}%)`, damageAmp)
                                        if (tooltip.includes(effect)) tooltip = tooltip.replace(effect, damageAmp)
                                    }})
                                }
                            tooltip = tooltip.replace(/bonus/g, 'Bonus ').replace(/spelldamage/g, 'AP').replace(/attackdamage/g, 'AD')
                            tooltip = tooltip.replace(/magic damage/gi, '<span class="color99FF99">Magic Damage</span>')
                            tooltip = tooltip.replace(/physical damage/gi, '<span class="colorFF8C00">Physical Damage</span>')
                            tooltip = tooltip.replace(/maximum health/gi, '<span class="colorFF0000">Maximum Health</span>')
                            tooltip = tooltip.replace(/health/gi, '<span class="colorFF0000">Health</span>')
                            tooltip = tooltip.replace(/energy/gi, '<span class="colorFFFF00">Energy</span>')
                            tooltip = tooltip.replace(/armor/gi, '<span class="colorFFFF00">Armor</span>')
                            tooltip = tooltip.replace(/physical/gi, '<span class="colorFF8C00">Physical</span>')
                            }
                        .ability-tooltip.col-lg-11.offset-lg-1.px-4.mb-4: span!= tooltip
                    br
                include partials/footer
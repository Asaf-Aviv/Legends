header#champ-header.main-bg.silent-border.shadow.mt-5
    .row
        .col-md-4
            .d-flex.justify-content-center.align-items-center
                a(href="/champions/" + champ.name.replace('_','').replace(' ', '').replace("'", '').replace('.', ''))
                    img(src=`/assets/league/img/champion-base-tile/${champ.name.replace("'", "").replace(' ', '').replace('.', '')}.png`)
        .col-md-4
            h1.champion-name.text-center.mb-3= champ.name
            .champion-title.text-center.mb-2: q= champ.title
            .champion-role.text-center.mb-2: span= 'Role: ' + champ.tags.join(', ')
        .league-info.col-md-4.justify-content-center.justify-content-md-end.pl-m-3
            .row.text-center
                .col-md-3
                    span.mb-2 Position: 
                        span.general-color= champStats[0].role[0] + champStats[0].role.slice(1).toLowerCase()
                .col-md-3
                    span.mb-2 Elo: 
                        span.general-color= champStats[0].elo.length > 10 ? 'Platinum+' : champStats[0].elo.toUpperCase() + champStats[0].elo.slice(1).toLowerCase()
                .col-md-3
                    span.mb-2 Patch: 
                        span.general-color= champStats[0].patch
                .col-md-3
                    span.mb-2 Games: 
                        span.general-color= champStats[0].gamesPlayed

main#champion-statistics.row.col-12.mt-5.justify-content-between
    section#champ-patch-stats.col-md-3.col-sm-12.pt-3.main-bg.silent-border.shadow
        table.table
            tr
                td Games Played
                td= champStats[0].gamesPlayed
            tr
                td Win Rate
                td= +String(champStats[0].winRate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
            tr
                td Play Rate
                td= +String(champStats[0].playRate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
            tr
                td Ban Rate
                td= +String(champStats[0].banRate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
            tr
                td Kills
                td= +String(champStats[0].kills).slice(0, 4)
            tr
                td Deaths
                td= +String(champStats[0].deaths).slice(0, 4)
            tr
                td Assists
                td= +String(champStats[0].assists).slice(0, 4)
            tr
                td Gold Earned
                td= champStats[0].goldEarned.toFixed(0)
            tr
                td Damage Dealt
                td= +String(champStats[0].damageComposition.total).split('.')[0]
            tr
                td Damage Taken
                td= +String(champStats[0].totalDamageTaken).split('.')[0]
            tr
                td Minions Killed
                td= +champStats[0].minionsKilled.toFixed(2)
            tr
                td Wards Placed
                td= champStats[0].wardPlaced.toFixed(2)
            tr
                td Wards Killed
                td= champStats[0].wardsKilled.toFixed(2)
            tr
                td Largest Killing Spree
                td= champStats[0].largestKillingSpree
            tr
                td Killing Sprees
                td= champStats[0].killingSprees.toFixed(2)
    section#build-sets.col-md-4.col-sm-12.pt-3.main-bg.silent-border.shadow
        - let highestCountItems = champStats[0].hashes.finalitemshashfixed.highestCount.hash.split('-').splice(1)
        - let highestWinrateItems = champStats[0].hashes.finalitemshashfixed.highestWinrate.hash.split('-').splice(1)

        h5.general-color.text-center Must Common Build
        
        .row.text-center
            p.col-4 Games 
                span= champStats[0].hashes.finalitemshashfixed.highestCount.count
            p.col-4 Wins 
                span= champStats[0].hashes.finalitemshashfixed.highestCount.wins
            p.col-4 Win Rate  
                span= +String(champStats[0].hashes.finalitemshashfixed.highestCount.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
        
        .items-tile.d-flex.justify-content-around.flex-wrap.mb-4
            each item in highestCountItems
                .item-tile
                    a(href=`/items/${item}`)
                        img(src=`/assets/league/img/item/${item}.png`, data-toggle="tooltip", title=leagueItems.data[item].plaintext)
        
        h5.general-color.text-center Highest Win Rate Build
        
        .row.text-center
            p.col-4 Games 
                span= champStats[0].hashes.finalitemshashfixed.highestWinrate.count
            p.col-4 Wins 
                span= champStats[0].hashes.finalitemshashfixed.highestWinrate.wins
            p.col-4 Win Rate  
                span= +String(champStats[0].hashes.finalitemshashfixed.highestWinrate.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
        
        .items-tiles.d-flex.justify-content-around.flex-wrap.pb-5
            each item in highestWinrateItems
                .item-tile
                    a(href=`/items/${item}`)
                        img(src=`/assets/league/img/item/${item}.png` data-toggle="tooltip" title=leagueItems.data[item].plaintext)

        - let highestSummonerCount = champStats[0].hashes.summonershash.highestCount.hash.split('-')
        - let highesSummonertWinrateS = champStats[0].hashes.summonershash.highestWinrate.hash.split('-')
        .row
            .col-12.pb-3
                h5.general-color.text-center.pb-2 Must Common Summoners
                p.text-center= +String(champStats[0].hashes.summonershash.highestCount.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
                .start-items.row.justify-content-around.text-center
                    each item in highestSummonerCount
                        each val, key in summonerSpells.data
                            if (summonerSpells.data[key].key == item)
                                .item-tile: img(src=`/assets/league/img/spell/${summonerSpells.data[key].image.full}`,
                                data-toggle="tooltip", title=summonerSpells.data[key].description)
            .col-12.pb-3
                h5.general-color.text-center.pb-2 Highest Win Rate Summoners
                p.text-center= +String(champStats[0].hashes.summonershash.highestWinrate.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
                .start-items.row.justify-content-around.text-center
                    each item in highesSummonertWinrateS
                        each val, key in summonerSpells.data
                            if (summonerSpells.data[key].key == item)
                                .item-tile: img(src=`/assets/league/img/spell/${summonerSpells.data[key].image.full}`, data-toggle="tooltip",
                                title=summonerSpells.data[key].description)

    section#summoner-sets.col-md-4.pt-3.main-bg.silent-border.shadow
        - let highestTrinketCount = champStats[0].hashes.trinkethash.highestCount.hash
        - let highestTrinketWinrate = champStats[0].hashes.trinkethash.highestWinrate.hash
        - let highestStartItemCount = champStats[0].hashes.firstitemshash.highestCount.hash.split('-').slice(1)
        - let highestStartItemWinrate = champStats[0].hashes.firstitemshash.highestWinrate.hash.split('-').slice(1)

        h5.general-color.text-center Trinkets
        .trinkets.row.justify-content-around.text-center
            .trinket
                p= +String(champStats[0].hashes.trinkethash.highestCount.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
                .item-tile: img(src=`/assets/league/img/item/${highestTrinketCount}.png`, data-toggle="tooltip", title=leagueItems.data[highestTrinketCount].plaintext)
            .trinket
                p= +String(champStats[0].hashes.trinkethash.highestWinrate.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
                .item-tile: img(src=`/assets/league/img/item/${highestTrinketWinrate}.png`, data-toggle="tooltip", title=leagueItems.data[highestTrinketCount].plaintext)
        hr
                
        h5.general-color.text-center.pb-2 Must Common Start Items
        p.text-center= +String(champStats[0].hashes.firstitemshash.highestCount.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
        .start-items.row.justify-content-around.text-center
            each item in highestStartItemCount
                .item-tile: img(src=`/assets/league/img/item/${item}.png`, data-toggle="tooltip", title=leagueItems.data[item].plaintext)
        hr

        h5.general-color.text-center.pb-2 Highest Win Rate Early Items
        p.text-center= +String(champStats[0].hashes.firstitemshash.highestWinrate.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
        .start-items.row.justify-content-around.text-center
            each item in highestStartItemWinrate
                .item-tile: img(src=`/assets/league/img/item/${item}.png`, data-toggle="tooltip", title=leagueItems.data[item].plaintext)

    section#skill-sets.col-12.mt-5
        
        - let highestCountSkill = champStats[0].hashes.skillorderhash.highestCount.hash.split('-').splice(1)
        - let highestWinrateSkill = champStats[0].hashes.skillorderhash.highestWinrate.hash.split('-').splice(1)
        
        .row.justify-content-around
            .col-md-5.p-md-2.p-0.main-bg.silent-border.shadow
                h5.general-color.text-center Must Common Skill Order
                .row.text-center
                    p.col-4 Games 
                        span= champStats[0].hashes.skillorderhash.highestCount.count
                    p.col-4 Wins 
                        span= champStats[0].hashes.skillorderhash.highestCount.wins
                    p.col-4 Win rate 
                        span= +String(champStats[0].hashes.skillorderhash.highestCount.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'
                .skill-order-table.mb-3
                    - for (let i = 0; i < 19; i++)
                        if i
                            .board-box= i
                        else
                            .empty-box
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[0].image.full}`, data-toggle="tooltip", data-original-title=champ.spells[0].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.Q= highestCountSkill[i] == 'Q' ? 'Q' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[1].image.full}`, data-toggle="tooltip", data-original-title=champ.spells[1].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.W= highestCountSkill[i] == 'W' ? 'W' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[2].image.full}`, data-toggle="tooltip", data-original-title=champ.spells[2].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.E= highestCountSkill[i] == 'E' ? 'E' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[3].image.full}`, data-toggle="tooltip", data-original-title=champ.spells[3].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.R= highestCountSkill[i] == 'R' ? 'R' : ''
            .col-md-5.p-md-2.p-0.main-bg.silent-border.shadow
                h5.general-color.text-center Highest Win Rate Skill Order
                .row.text-center
                    p.col-4 Games 
                        span= champStats[0].hashes.skillorderhash.highestWinrate.count
                    p.col-4 Wins 
                        span= champStats[0].hashes.skillorderhash.highestWinrate.wins
                    p.col-4 Win rate 
                        span= +String(champStats[0].hashes.skillorderhash.highestWinrate.winrate).slice(2, 6).split('').map((v, i) => i === 1 ? v+'.' : v).join('') + '%'

                .skill-order-table.mb-3
                    - for (let i = 0; i < 19; i++)
                        if i
                            .board-box= i
                        else
                            .empty-box
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[0].image.full}`, data-toggle="tooltip", title=champ.spells[0].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.Q= highestWinrateSkill[i] == 'Q' ? 'Q' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[1].image.full}`, data-toggle="tooltip", title=champ.spells[1].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.W= highestWinrateSkill[i] == 'W' ? 'W' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[2].image.full}`, data-toggle="tooltip", title=champ.spells[2].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.E= highestWinrateSkill[i] == 'E' ? 'E' : ''
                    .board-box: img(src=`/assets/league/img/spell/${champ.spells[3].image.full}`, data-toggle="tooltip", title=champ.spells[3].description)
                    - for (let i = 0; i < 18; i++)
                        .board-box.R= highestWinrateSkill[i] == 'R' ? 'R' : ''
        br
        br
    
    #runes-set.row
        //- - const highestRuneWinrate = champStats[0].hashes.runehash.highestWinrate.hash.split('-').map(Number)
        //- - const highestRuneCount = champStats[0].hashes.runehash.highestCount.hash.split('-').map(Number)
        - for (let i = 0; i < 2; i++)
            - let mainPerk, subPerk, perk;
            if i
                - perk = champStats[0].hashes.runehash.highestCount.hash.split('-').map(Number)
                - mainPerk = runePaths.find(r => r.id == perk[0])
                - subPerk = runePaths.find(r => r.id == perk[5])
            else
                - perk = champStats[0].hashes.runehash.highestWinrate.hash.split('-').map(Number)
                - mainPerk = runePaths.find(r => r.id == perk[0])
                - subPerk = runePaths.find(r => r.id == perk[5])
            .runes.main-bg.silent-border.shadow
                h6.general-color.text-center= i ? 'Highest Win Rate Runes' : 'Must Common Runes'
                .stats-runes-wrapper
                    .main-perk
                        img.active(src=`/assets/league/img/runesReforged/perk/${perk[0]}.png` 
                            data-title=runeDesc[mainPerk.id].name + '<br><br>' + runeDesc[mainPerk.id].shortDesc
                            data-toggle="tooltip" data-html="true")
                        each runeBlock in mainPerk.slots
                            .rune-block
                                each rune in runeBlock.runes
                                    img(class=perk.includes(rune.id) ? 'active' : ''
                                        src=`${ddragonNoVer}/img/${rune.icon}`
                                        data-title=rune.name + '<br><br>' + rune.longDesc
                                        data-toggle="tooltip" data-html="true")
                    .sub-perk
                        img.active(src=`/assets/league/img/runesReforged/perk/${perk[5]}.png`
                            data-title=runeDesc[subPerk.id].name + '<br><br>' + runeDesc[subPerk.id].shortDesc
                            data-toggle="tooltip" data-html="true")
                        
                        each runeBlock, j in subPerk.slots
                            if j
                                .rune-block
                                    each rune in runeBlock.runes
                                        img(class=perk.includes(rune.id) ? 'active' : ''
                                            src=`${ddragonNoVer}/img/${rune.icon}`
                                            data-title=rune.name + '<br><br>' + rune.longDesc
                                            data-toggle="tooltip" data-html="true")

    section#charts-wrapper.col-12.p-0
        .row.p-0
            .col-md-6.col-12.text-center
                h5.general-color.mb-3 Win Rate by Games Played On Champion
                canvas#exp-chart
            .col-md-6.col-12.text-center
                h5.general-color.mb-3 Win Rate By Game Length
                canvas#game-length-chart
-champStats = champStats[0]
script.
    Chart.defaults.global.elements.responsive = true;
    Chart.defaults.global.tooltips.xPadding = 10;
    Chart.defaults.global.tooltips.yPadding = 10;
    Chart.defaults.global.tooltips.titleMarginBottom = 10;
    Chart.defaults.global.tooltips.position = 'average';
    var copy = !{JSON.stringify(champStats)}

    var gameCount = Object.keys(copy.winsByMatchesPlayed).map(game => copy.winsByMatchesPlayed[game].gamesPlayed)

    var ctxD = document.getElementById("exp-chart").getContext('2d');
    
    var myLineChart1 = new Chart(ctxD, {
        type: 'line',
        data: {
            labels: ["1-50", "51-100", "101-150", "151-200", "200+"],
            datasets: [
                {
                    label: ' Winrate',
                    data: [
                        (!{champStats.winsByMatchesPlayed.oneToFifty.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchesPlayed.fiftyOneToHundred.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchesPlayed.hundredOneToHundredFifty.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchesPlayed.hundredFiftyOneToTwoHundred.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchesPlayed.twoHundredOnePlus.winRate}*100).toFixed(2)
                    ],
                    pointBackgroundColor: 'rgb(45, 255, 85)',
                    pointBorderColor: 'rgb(45, 255, 85)',
                    borderWidth: 1,
                    pointRadius: 4,
                    borderColor: 'rgb(255,255,255)'
                }
            ]
        },
        options: {
            legend: {display: false},
            responsive: true,
            tooltips: {
                bodySpacing: 5,
                titleMarginBottom: 5,
                callbacks: {
                    title: (tooltipItem, data) => '      '+data['labels'][tooltipItem[0]['index']] + ' Games',
                    label: (dataItem, data) => '  '+data['datasets'][0]['data'][dataItem['index']] + '%',
                    afterLabel: game => '  '+gameCount[game['index']] + ' Total Games'
                }
            },
            scales: {
                yAxes: [{
                    display: true,
                    ticks: {suggestedMin: 40}
                }],
                xAxes: [{barPercentage: 0.6}]
            }
        }
    });

    var ctxD2 = document.getElementById("game-length-chart").getContext('2d');
    var myLineChart1 = new Chart(ctxD2, {
        type: 'line',
        data: {
            labels: ["0-15", "15-20", "20-25", "25-30", "30-35", "35-40", "40+"],
            datasets: [
                {
                    label: ' Winrate',
                    data: [
                        (!{champStats.winsByMatchLength.zeroToFifteen.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.fifteenToTwenty.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.twentyToTwentyFive.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.twentyFiveToThirty.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.thirtyToThirtyFive.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.thirtyFiveToForty.winRate}*100).toFixed(2),
                        (!{champStats.winsByMatchLength.fortyPlus.winRate}*100).toFixed(2)
                    ],
                    pointBackgroundColor: 'rgb(45, 255, 85)',
                    pointBorderColor: 'rgb(45, 255, 85)',
                    borderWidth: 1,
                    pointRadius: 4,
                    borderColor: 'rgb(255,255,255)'
                }
            ]
        },
        options: {
            legend: {display: false},
            responsive: true,
            tooltips: {
                bodySpacing: 5,
                titleMarginBottom: 5,
                callbacks: {
                    title: (tooltipItem, data) => '      '+data['labels'][tooltipItem[0]['index']] + ' Minutes',
                    label: (dataItem, data) => '  '+data['datasets'][0]['data'][dataItem['index']] + '%',
                    afterLabel: game => '  '+gameCount[game['index']] + ' Total Games'
                }
            },
            scales: {
                yAxes: [{
                    display: true,
                    ticks: {suggestedMin: 40}
                }],
                xAxes: [{barPercentage: 0.6}]
            }
        }
    });